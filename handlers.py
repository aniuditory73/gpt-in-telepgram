from aiogram import types, Dispatcher
from aiogram.filters.command import Command
from aiogram.methods import SendChatAction
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from services import client
from utils import clean_html


MODELS = {
    "horizon_beta": "openrouter/horizon-beta",
    "deepseek_v3": "deepseek/deepseek-chat-v3-0324:free",
    "mistral_7b": "mistralai/mistral-7b-instruct:free"
}

ROLES = {
    "programmer": "üë®‚Äçüíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
    "writer": "‚úçÔ∏è –ü–∏—Å–∞—Ç–µ–ª—å",
    "teacher": "üéì –£—á–∏—Ç–µ–ª—å",
    "analyst": "üïµÔ∏è –ê–Ω–∞–ª–∏—Ç–∏–∫"
}

user_models = {}
user_roles = {}


def get_models_keyboard() -> InlineKeyboardMarkup:
    buttons_data = [
        ("üåÖ Horizon Beta", "horizon_beta"),
        ("üîé Deepseek V3", "deepseek_v3"),
    ]
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"set_model:{key}")]
        for name, key in buttons_data
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_roles_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"set_role:{key}")]
        for key, name in ROLES.items()
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def cmd_start(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø - –±–æ—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏.\n"
        "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /models, —Ä–æ–ª—å ‚Äî /roles –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.\n"
        "<i>–ß–µ–º –ø–æ–º–æ—á—å?</i>",
        parse_mode="HTML"
    )


async def cmd_models(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=get_models_keyboard()
    )


async def set_model_callback(call: CallbackQuery):
    user_id = call.from_user.id
    model_key = call.data.split(":", 1)[1]

    if model_key in MODELS:
        user_models[user_id] = MODELS[model_key]
        await call.answer(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {MODELS[model_key]}", show_alert=True)
        await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å:\n<b>{MODELS[model_key]}</b>", parse_mode="HTML")
    else:
        await call.answer("–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)


async def cmd_roles(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:",
        reply_markup=get_roles_keyboard()
    )


async def set_role_callback(call: CallbackQuery):
    user_id = call.from_user.id
    role_key = call.data.split(":", 1)[1]

    if role_key in ROLES:
        user_roles[user_id] = role_key
        await call.answer(f"–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {ROLES[role_key]}", show_alert=True)
        await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å:\n<b>{ROLES[role_key]}</b>", parse_mode="HTML")
    else:
        await call.answer("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)


def get_system_prompt(role_key: str) -> str:
    if role_key == "programmer":
        return ("–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç —á–∏—Å—Ç—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥ –∏ —è—Å–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã. "
                "–û—Ç–≤–µ—á–∞–π –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.""–§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é HTML. "
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown. –ù–µ–º–Ω–æ–≥–æ —Ä–∞–∑–±–∞–≤—å —Ç–µ–∫—Å—Ç —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π.""–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω–æ–π enter –ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫, —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º")
    elif role_key == "writer":
        return ("–¢—ã ‚Äî —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —è—Ä–∫–∏–µ, –∂–∏–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ –∏–¥–µ–∏. "
                "–ü–∏—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ.""–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –º–∞–∫—Å–∏–º—É–º 20 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é HTML. "
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown. –ù–µ–º–Ω–æ–≥–æ —Ä–∞–∑–±–∞–≤—å —Ç–µ–∫—Å—Ç —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π.""–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω–æ–π enter –ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫, —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º")
    elif role_key == "teacher":
        return ("–¢—ã ‚Äî —É—á–∏—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—å—Å—è. "
                "–û—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.""–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –º–∞–∫—Å–∏–º—É–º 20 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é HTML. "
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown. –ù–µ–º–Ω–æ–≥–æ —Ä–∞–∑–±–∞–≤—å —Ç–µ–∫—Å—Ç —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π.""–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω–æ–π enter –ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫, —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º")
    elif role_key == "analyst":
        return ("–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∞—ë—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. "
                "–ë—É–¥—å —Ç–æ—á–µ–Ω –∏ —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª–µ–Ω.""–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –º–∞–∫—Å–∏–º—É–º 20 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é HTML. "
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown. –ù–µ–º–Ω–æ–≥–æ —Ä–∞–∑–±–∞–≤—å —Ç–µ–∫—Å—Ç —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π.""–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω–æ–π enter –ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫, —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º")
    else:
        return ("–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –º–∞–∫—Å–∏–º—É–º 20 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é HTML. "
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown. –ù–µ–º–Ω–æ–≥–æ —Ä–∞–∑–±–∞–≤—å —Ç–µ–∫—Å—Ç —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π.""–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω–æ–π enter –ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫, —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º")


async def chat_handler(message: types.Message):
    user_id = message.from_user.id
    model_name = user_models.get(user_id, MODELS["deepseek_v3"])
    role_key = user_roles.get(user_id, None)

    system_prompt = get_system_prompt(role_key)

    try:
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")
        await message.bot(SendChatAction(chat_id=message.chat.id, action="typing"))

        response = client.chat.completions.create(
            model=model_name,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message.text}
            ],
            max_tokens=5000
        )

        answer = response.choices[0].message.content
        cleaned_answer = clean_html(answer)
        await message.answer(cleaned_answer)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:\n{e}")


def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_models, Command("models"))
    dp.callback_query.register(set_model_callback, lambda c: c.data and c.data.startswith("set_model:"))
    dp.message.register(cmd_roles, Command("roles"))
    dp.callback_query.register(set_role_callback, lambda c: c.data and c.data.startswith("set_role:"))
    dp.message.register(chat_handler)
